{
  "title": "Bellagio Editor",
  "story": [
    {
      "type": "paragraph",
      "id": "ef12f30bf898e8a9",
      "text": "One of the outcomes from the [[Bellagio Hack Week]] was a nice Policy editor. This was originally written in Angular, and bundled with the whole [[voteit-api]] package, but to make it easier to drop into as many sites as possible, I've pulled it out to a standalone jQuery script."
    },
    {
      "type": "paragraph",
      "id": "ebaa426b2446401a",
      "text": "There are two main ways we could use this:"
    },
    {
      "type": "paragraph",
      "id": "3da6df9faf588dcb",
      "text": "The first is to consolidate all the meta-information around the Policies/Issues we will display, which is currently a mix of [[Public Whip]] data, and extra fields that Richard currently maintains in a spreadsheet. This would give us a nice editing interface to that, and potentially also expose it over an API, so that the [[TheyWorkForYou]] PHP doesn't need to hard-code it all."
    },
    {
      "type": "paragraph",
      "id": "53a38bb24349d627",
      "text": "The second is to use it as a full-blown replacement for the [[Public Whip Policy Editor]]. It already has the ability to ask a remote API endpoint for all motions matching a given query string, and attach those to Issues by choosing a direction and weight. The main things needed for this approach would be extending the input fields to also include Richard's @aye/@nay descriptions for each Motion."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Bellagio Editor",
        "story": []
      },
      "date": 1417532895417
    },
    {
      "item": {
        "type": "factory",
        "id": "ef12f30bf898e8a9"
      },
      "id": "ef12f30bf898e8a9",
      "type": "add",
      "date": 1417532898564
    },
    {
      "type": "edit",
      "id": "ef12f30bf898e8a9",
      "item": {
        "type": "paragraph",
        "id": "ef12f30bf898e8a9",
        "text": "One of the outcomes from the [[Bellagio Hack Week]] was a nice Policy editor. This was originally written in Angular, and bundled with the whole [[voteit-api]] package, but to make it easier to drop into as many sites as possible, I've pulled it out to a standalone jQuery script."
      },
      "date": 1417532990149
    },
    {
      "item": {
        "type": "paragraph",
        "id": "ebaa426b2446401a",
        "text": ""
      },
      "id": "ebaa426b2446401a",
      "type": "add",
      "after": "ef12f30bf898e8a9",
      "date": 1417532990159
    },
    {
      "type": "edit",
      "id": "ebaa426b2446401a",
      "item": {
        "type": "paragraph",
        "id": "ebaa426b2446401a",
        "text": "There are two main ways we could use this:"
      },
      "date": 1417533011647
    },
    {
      "item": {
        "type": "paragraph",
        "id": "3da6df9faf588dcb",
        "text": ""
      },
      "id": "3da6df9faf588dcb",
      "type": "add",
      "after": "ebaa426b2446401a",
      "date": 1417533011653
    },
    {
      "type": "edit",
      "id": "3da6df9faf588dcb",
      "item": {
        "type": "paragraph",
        "id": "3da6df9faf588dcb",
        "text": "The first is to consolidate all the meta-information around the Policies/Issues we will display, which is currently a mix of [[Public Whip]] data, and extra fields that Richard currently maintains in a spreadsheet. This would give us a nice editing interface to that, and potentially also expose it over an API, so that the [[TheyWorkForYou]] PHP doesn't need to hard-code it all."
      },
      "date": 1417533118294
    },
    {
      "item": {
        "type": "paragraph",
        "id": "53a38bb24349d627",
        "text": ""
      },
      "id": "53a38bb24349d627",
      "type": "add",
      "after": "3da6df9faf588dcb",
      "date": 1417533118302
    },
    {
      "type": "edit",
      "id": "53a38bb24349d627",
      "item": {
        "type": "paragraph",
        "id": "53a38bb24349d627",
        "text": "The second is to use it as a full-blown replacement for the [[Public Whip Policy Editor]]. It already has the ability to ask a remote API endpoint for all motions matching a given query string, and attach those to Issues by choosing a direction and weight. The main things needed for this approach would be extending the input fields to also include Richard's @aye/@nay descriptions for each Motion."
      },
      "date": 1417533268911
    },
    {
      "item": {
        "type": "paragraph",
        "id": "ba1d9a0ee2630d7b",
        "text": ""
      },
      "id": "ba1d9a0ee2630d7b",
      "type": "add",
      "after": "53a38bb24349d627",
      "date": 1417533268920
    },
    {
      "type": "remove",
      "id": "ba1d9a0ee2630d7b",
      "date": 1417533270290
    }
  ]
}